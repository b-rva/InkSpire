==================================================================================================================================================

✅ Step 1: Create a GitHub Repository
We created a GitHub repository for our project:
🔗 GitHub Repo URL: https://github.com/b-rva/InkSpire
- Public repo
- .gitignore template: node
- license: apache 2.0

==================================================================================================================================================

✅ Step 2: Clone the Repository

We cloned the repo to our local machine using:
git clone https://github.com/b-rva/InkSpire

Then, navigated into the project directory:
cd InkSpire

✅ Actual project structure (understand/count changes when required)

Inkspire/
│── apps/                  # Main applications directory
│   ├── client/            # React (Frontend)
│   │   ├── public/        # Static files
│   │   ├── src/           # Main source folder
│   │   │   ├── assets/    # Images, icons, fonts
│   │   │   ├── components/ # Reusable UI components
│   │   │   ├── hooks/     # Custom React hooks
│   │   │   ├── pages/     # Pages (Home, Login, Blog, etc.)
│   │   │   ├── redux/     # Redux state management
│   │   │   ├── routes/    # React Router routes
│   │   │   ├── services/  # API calls (Axios, fetch)
│   │   │   ├── styles/    # Tailwind CSS or custom styles
│   │   │   ├── utils/     # Utility functions (formatting, helpers)
│   │   │   ├── App.jsx    # Main React App component
│   │   │   ├── main.jsx   # Entry point
│   │   ├── .env           # Environment variables
│   │   ├── package.json   # Frontend dependencies
│   │   ├── vite.config.js # Vite config
│   │   ├── tailwind.config.js # TailwindCSS config
│   ├── server/            # Node.js + Express (Backend)
│   │   ├── config/        # Config files (DB, auth, etc.)
│   │   ├── controllers/   # Business logic for routes
│   │   ├── middleware/    # Authentication, error handling
│   │   ├── models/        # MongoDB schemas (User, Blog, Comment)
│   │   ├── routes/        # API routes (auth, blogs, users)
│   │   ├── utils/         # Utility functions (hashing, JWT)
│   │   ├── index.js       # Entry point for the server
│   │   ├── .env           # Backend environment variables
│   │   ├── package.json   # Backend dependencies
│   ├── README.md          # Project documentation
│   ├── .gitignore         # Ignore unnecessary files
│   ├── package.json       # Root package.json (for workspaces)
│   ├── .env               # Global environment variables
│   ├── nodemon.json       # Nodemon config for backend
│   ├── docker-compose.yml # Optional: Docker config

==================================================================================================================================================

✅ Step 3: Initialize the Frontend (React + Vite)

We set up the client-side (frontend) React app with Vite:
npm create vite@latest client --template react

Then moved into the client directory:
cd client

Installed dependencies:
npm install

==================================================================================================================================================

✅ Step 4: Install Required Frontend Dependencies

We installed:

TailwindCSS & PostCSS

React & React DOM

ESLint & Prettier

Tailwind setup:
npm install tailwindcss postcss autoprefixer
npx tailwindcss init -p

Then, we updated tailwind.config.js:

export default {
  content: ["./index.html", "./src/**/*.{js,jsx,ts,tsx}"],
  theme: {
    extend: {},
  },
  plugins: [],
};

And added Tailwind to index.css:

@tailwind base;
@tailwind components;
@tailwind utilities;

==================================================================================================================================================

✅ Step 5: Fix TailwindCSS PostCSS Issues

We installed the correct PostCSS plugin for Tailwind:

npm install @tailwindcss/postcss

And ensured PostCSS config was correct (postcss.config.js):

export default {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
};

==================================================================================================================================================

✅ Step 6: Running the Frontend Dev Server

Finally, we ran the development server successfully:

npm run dev

🚀 Vite server started successfully!

==================================================================================================================================================

✅ Step 7: Initialize the Backend (Express + MongoDB)

Moved back to the root folder and created the backend:

mkdir server && cd server
npm init -y

Installed backend dependencies:
npm install express mongoose dotenv cors jsonwebtoken bcryptjs

Created server entry file (server.js):

import express from "express";
import dotenv from "dotenv";
import cors from "cors";

dotenv.config();
const app = express();
app.use(cors());
app.use(express.json());

app.get("/", (req, res) => {
  res.send("Server is running!");
});

const PORT = process.env.PORT || 5000;
app.listen(PORT, () => console.log(`Server running on port ${PORT}`));

==================================================================================================================================================

✅ Step 8: Running the Backend Dev Server

=> node server.js

-if it doesn't run:

add "type": "module" to package.json

=> use nodemon for auto-reloading:

npm install -g nodemon

npm run dev

-if it doesn't run:

"scripts": {
  "start": "node server.js",
  "dev": "nodemon server.js"
}

🎉 Backend is running on http://localhost:5000!

==================================================================================================================================================

✅ Step 9: Git Setup & First Commit

We initialized Git and pushed the initial code:

git init
git add .
git commit -m "Initial commit"
git branch -M main
git remote add origin <your-repo-url>
git push -u origin main

if warnings while 'git add.':
-------
These warnings are because Git is automatically converting line endings from LF (Linux/macOS) to CRLF (Windows). They won't break your code, but if you want to fix them, follow these steps:

✅ Fix: Prevent LF → CRLF Conversion
1️⃣ Set Git to use LF for all files
Run this command in your terminal:

sh
Copy
Edit
git config --global core.autocrlf false
This prevents Git from changing line endings when checking out files.

2️⃣ Convert existing files to LF
Run this command inside your project folder (D:\InkSpire\):

sh
Copy
Edit
git rm --cached -r .
git reset --hard
This will remove and re-add all files with proper LF line endings.

3️⃣ (Optional) Set LF as default for new files

If you're using VS Code, open settings.json and add:

"files.eol": "\n"
This ensures new files use LF instead of CRLF.

Now, try adding and committing again:
git add .
git commit -m "Initial commit"
This should remove the warnings. 🚀

-------

✅ Tools & Websites Used

🔗 GitHub - Repository hosting
🔗 Vercel/Netlify (for future deployment)
🔗 MongoDB Atlas (for database setup - pending)
🔗 Render/DigitalOcean (for backend deployment - pending)

📌 Next Steps (Tomorrow’s Task)
🔹 Set up MongoDB connection
🔹 Implement Authentication (JWT + Google OAuth)
🔹 Define User roles & permissions
🔹 Start building UI for login/signup

==================================================================================================================================================

✅ Step 10: Setup MongoDB

Step 1: Create a MongoDB Database
You have two options:

MongoDB Atlas (Cloud - Recommended)

Go to MongoDB Atlas.

Create a free account (or log in).

Create a new Project and a Cluster.

Select Shared Cluster (Free tier).

Choose a Cloud Provider & Region.

Click Create Cluster (This takes a few minutes).

(Create database user > drivers > )

Once ready, go to Database > Connect > Drivers.

Copy the MongoDB connection URI (starts with mongodb+srv://).

Local MongoDB

Download MongoDB from here.

Install and start MongoDB.

Run MongoDB using:

sh
Copy
Edit
mongod
Connect using:

sh
Copy
Edit
mongo
Use the local MongoDB URI:

arduino
Copy
Edit
mongodb://localhost:27017/InkSpireDB
Step 2: Install Mongoose
In your server folder, install Mongoose:

sh
Copy
Edit
npm install mongoose dotenv
Step 3: Connect MongoDB in Express Backend
Open server.js (or index.js) and update it:

javascript
Copy
Edit
import express from "express";
import mongoose from "mongoose";
import dotenv from "dotenv";

dotenv.config();
const app = express();

// Middleware
app.use(express.json());

// Connect to MongoDB
const connectDB = async () => {
  try {
    await mongoose.connect(process.env.MONGO_URI, {
      useNewUrlParser: true,
      useUnifiedTopology: true,
    });
    console.log("MongoDB connected successfully");
  } catch (error) {
    console.error("MongoDB connection error:", error);
    process.exit(1);
  }
};

// Start server after DB connection
connectDB().then(() => {
  app.listen(5000, () => {
    console.log("Server running on port 5000");
  });
});
Step 4: Set Up .env File
Create a .env file in the server folder:

ini
Copy
Edit
MONGO_URI=mongodb+srv://your_username:your_password@cluster.mongodb.net/InkSpireDB
PORT=5000
Step 5: Run the backend

npm run dev

-if you open localhost:5000, you will see"
Cannot GET / , because our backend does not have a route for /, so when you open http://localhost:5000, the server doesn’t know what to return.

Quick Fix:

Add a basic route in your server.js:
app.get("/", (req, res) => {
  res.send("Welcome to InkSpire API!");
});

Now restart your server and refresh http://localhost:5000. It should display:
Welcome to InkSpire API!

If everything is set up correctly, you should see:
MongoDB connected successfully
Server running on port 5000

==================================================================================================================================================

✅ Step 11: Connect frontend and backend

Step 1: Install React Router (if not installed)
sh
Copy
Edit
npm install react-router-dom
✅ Step 2: Set Up Routes in main.jsx
Make sure your main.jsx file is using BrowserRouter.

📂 src/main.jsx

javascript
Copy
Edit
import React from "react";
import ReactDOM from "react-dom/client";
import { BrowserRouter } from "react-router-dom";
import App from "./App";
import "./index.css";

ReactDOM.createRoot(document.getElementById("root")).render(
  <BrowserRouter>
    <App />
  </BrowserRouter>
);
✅ Step 3: Define Routes in App.jsx
Now, update App.jsx to include routes for /blogs and /login.

📂 src/App.jsx

javascript
Copy
Edit
import { Routes, Route } from "react-router-dom";
import Blogs from "./pages/Blogs";
import Login from "./pages/Login";
import Home from "./pages/Home"; // A homepage if needed

function App() {
  return (
    <Routes>
      <Route path="/" element={<Home />} />
      <Route path="/blogs" element={<Blogs />} />
      <Route path="/login" element={<Login />} />
    </Routes>
  );
}

export default App;
✅ Step 4: Create a Basic Home Page
Since http://localhost:5173/ is showing the same screen for all routes, let's create a Home.jsx page.

📂 src/pages/Home.jsx

javascript
Copy
Edit
import React from "react";
import { Link } from "react-router-dom";

const Home = () => {
  return (
    <div>
      <h1>Welcome to InkSpire</h1>
      <p>Explore and write amazing blogs!</p>
      <nav>
        <Link to="/blogs">View Blogs</Link> | <Link to="/login">Login</Link>
      </nav>
    </div>
  );
};

export default Home;
✅ Step 5: Restart and Test
Now restart your frontend:

sh
Copy
Edit
npm run dev
📌 Check these URLs:

http://localhost:5173/ → Should show the Home Page.

http://localhost:5173/blogs → Should show Blogs.

http://localhost:5173/login → Should show Login Page.

==================================================================================================================================================

