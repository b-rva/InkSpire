✅ Step 1: Create a GitHub Repository
We created a GitHub repository for our project:
🔗 GitHub Repo URL: https://github.com/b-rva/InkSpire
- Public repo
- .gitignore template: node
- license: apache 2.0

✅ Step 2: Clone the Repository

We cloned the repo to our local machine using:
git clone https://github.com/b-rva/InkSpire

Then, navigated into the project directory:
cd InkSpire

✅ Actual project structure (understand/count changes when required)

Inkspire/
│── apps/                  # Main applications directory
│   ├── client/            # React (Frontend)
│   │   ├── public/        # Static files
│   │   ├── src/           # Main source folder
│   │   │   ├── assets/    # Images, icons, fonts
│   │   │   ├── components/ # Reusable UI components
│   │   │   ├── hooks/     # Custom React hooks
│   │   │   ├── pages/     # Pages (Home, Login, Blog, etc.)
│   │   │   ├── redux/     # Redux state management
│   │   │   ├── routes/    # React Router routes
│   │   │   ├── services/  # API calls (Axios, fetch)
│   │   │   ├── styles/    # Tailwind CSS or custom styles
│   │   │   ├── utils/     # Utility functions (formatting, helpers)
│   │   │   ├── App.jsx    # Main React App component
│   │   │   ├── main.jsx   # Entry point
│   │   ├── .env           # Environment variables
│   │   ├── package.json   # Frontend dependencies
│   │   ├── vite.config.js # Vite config
│   │   ├── tailwind.config.js # TailwindCSS config
│   ├── server/            # Node.js + Express (Backend)
│   │   ├── config/        # Config files (DB, auth, etc.)
│   │   ├── controllers/   # Business logic for routes
│   │   ├── middleware/    # Authentication, error handling
│   │   ├── models/        # MongoDB schemas (User, Blog, Comment)
│   │   ├── routes/        # API routes (auth, blogs, users)
│   │   ├── utils/         # Utility functions (hashing, JWT)
│   │   ├── index.js       # Entry point for the server
│   │   ├── .env           # Backend environment variables
│   │   ├── package.json   # Backend dependencies
│   ├── README.md          # Project documentation
│   ├── .gitignore         # Ignore unnecessary files
│   ├── package.json       # Root package.json (for workspaces)
│   ├── .env               # Global environment variables
│   ├── nodemon.json       # Nodemon config for backend
│   ├── docker-compose.yml # Optional: Docker config


✅ Step 3: Initialize the Frontend (React + Vite)

We set up the client-side (frontend) React app with Vite:
npm create vite@latest client --template react

Then moved into the client directory:
cd client

Installed dependencies:
npm install

✅ Step 4: Install Required Frontend Dependencies

We installed:

TailwindCSS & PostCSS

React & React DOM

ESLint & Prettier

Tailwind setup:
npm install tailwindcss postcss autoprefixer
npx tailwindcss init -p

Then, we updated tailwind.config.js:

export default {
  content: ["./index.html", "./src/**/*.{js,jsx,ts,tsx}"],
  theme: {
    extend: {},
  },
  plugins: [],
};

And added Tailwind to index.css:

@tailwind base;
@tailwind components;
@tailwind utilities;

✅ Step 5: Fix TailwindCSS PostCSS Issues

We installed the correct PostCSS plugin for Tailwind:

npm install @tailwindcss/postcss

And ensured PostCSS config was correct (postcss.config.js):

export default {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
};

✅ Step 6: Running the Frontend Dev Server

Finally, we ran the development server successfully:

npm run dev

🚀 Vite server started successfully!

✅ Step 7: Initialize the Backend (Express + MongoDB)

Moved back to the root folder and created the backend:

mkdir server && cd server
npm init -y

Installed backend dependencies:
npm install express mongoose dotenv cors jsonwebtoken bcryptjs

Created server entry file (server.js):

import express from "express";
import dotenv from "dotenv";
import cors from "cors";

dotenv.config();
const app = express();
app.use(cors());
app.use(express.json());

app.get("/", (req, res) => {
  res.send("Server is running!");
});

const PORT = process.env.PORT || 5000;
app.listen(PORT, () => console.log(`Server running on port ${PORT}`));

✅ Step 8: Running the Backend Dev Server

=> node server.js

-if it doesn't run:

add "type": "module" to package.json

=> use nodemon for auto-reloading:

npm install -g nodemon

npm run dev

-if it doesn't run:

"scripts": {
  "start": "node server.js",
  "dev": "nodemon server.js"
}



🎉 Backend is running on http://localhost:5000!

✅ Step 9: Git Setup & First Commit

We initialized Git and pushed the initial code:

git init
git add .
git commit -m "Initial commit"
git branch -M main
git remote add origin <your-repo-url>
git push -u origin main

✅ Tools & Websites Used

🔗 GitHub - Repository hosting
🔗 Vercel/Netlify (for future deployment)
🔗 MongoDB Atlas (for database setup - pending)
🔗 Render/DigitalOcean (for backend deployment - pending)

📌 Next Steps (Tomorrow’s Task)
🔹 Set up MongoDB connection
🔹 Implement Authentication (JWT + Google OAuth)
🔹 Define User roles & permissions
🔹 Start building UI for login/signup

